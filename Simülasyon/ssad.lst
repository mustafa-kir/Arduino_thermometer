CCS PCM C Compiler, Version 5.007, 61971               16-Oca-22 22:16

               Filename:   C:\Users\rifat\Desktop\Yeni klasör\ssad.lst

               ROM used:   1456 words (18%)
                           Largest free fragment is 2048
               RAM used:   19 (5%) at main() level
                           41 (11%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  05
0001:  MOVWF  0A
0002:  GOTO   50B
0003:  NOP
.................... #include <16f877.h> // pic mikrodenetleyiciyi ttanýmlaama yapýyoruz. 
.................... //////// Standard Header file for the PIC16F877 device //////////////// 
.................... #device PIC16F877 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA 8C,29
000D:  DATA E9,31
000E:  DATA E1,35
000F:  DATA EC,34
0010:  DATA 6B,10
0011:  DATA 3D,00
*
00EA:  MOVF   0B,W
00EB:  MOVWF  2A
00EC:  BCF    0B.7
00ED:  BSF    03.5
00EE:  BSF    03.6
00EF:  BSF    0C.7
00F0:  BSF    0C.0
00F1:  NOP
00F2:  NOP
00F3:  BCF    03.5
00F4:  MOVF   0C,W
00F5:  ANDLW  7F
00F6:  BTFSC  03.2
00F7:  GOTO   131
00F8:  BCF    03.6
00F9:  MOVWF  2B
00FA:  BSF    03.6
00FB:  MOVF   0D,W
00FC:  BCF    03.6
00FD:  MOVWF  2C
00FE:  BSF    03.6
00FF:  MOVF   0F,W
0100:  BCF    03.6
0101:  MOVWF  2D
0102:  MOVF   2B,W
0103:  MOVWF  37
0104:  CALL   0BE
0105:  MOVF   2C,W
0106:  BSF    03.6
0107:  MOVWF  0D
0108:  BCF    03.6
0109:  MOVF   2D,W
010A:  BSF    03.6
010B:  MOVWF  0F
010C:  BSF    03.5
010D:  BSF    0C.7
010E:  BSF    0C.0
010F:  NOP
0110:  NOP
0111:  BCF    03.5
0112:  RLF    0C,W
0113:  RLF    0E,W
0114:  ANDLW  7F
0115:  BTFSC  03.2
0116:  GOTO   131
0117:  BCF    03.6
0118:  MOVWF  2B
0119:  BSF    03.6
011A:  MOVF   0D,W
011B:  BCF    03.6
011C:  MOVWF  2C
011D:  BSF    03.6
011E:  MOVF   0F,W
011F:  BCF    03.6
0120:  MOVWF  2D
0121:  MOVF   2B,W
0122:  MOVWF  37
0123:  CALL   0BE
0124:  MOVF   2C,W
0125:  BSF    03.6
0126:  MOVWF  0D
0127:  BCF    03.6
0128:  MOVF   2D,W
0129:  BSF    03.6
012A:  MOVWF  0F
012B:  INCF   0D,F
012C:  BTFSC  03.2
012D:  INCF   0F,F
012E:  BCF    03.6
012F:  GOTO   0ED
0130:  BSF    03.6
0131:  BCF    03.6
0132:  BTFSC  2A.7
0133:  BSF    0B.7
0134:  BCF    0A.3
0135:  BCF    0A.4
0136:  GOTO   53E (RETURN)
0137:  MOVLW  8E
0138:  MOVWF  77
0139:  MOVF   2B,W
013A:  MOVWF  78
013B:  MOVF   2A,W
013C:  MOVWF  79
013D:  CLRF   7A
013E:  MOVF   78,F
013F:  BTFSS  03.2
0140:  GOTO   14B
0141:  MOVF   79,W
0142:  MOVWF  78
0143:  CLRF   79
0144:  MOVLW  08
0145:  SUBWF  77,F
0146:  MOVF   78,F
0147:  BTFSS  03.2
0148:  GOTO   14B
0149:  CLRF   77
014A:  GOTO   153
014B:  BCF    03.0
014C:  BTFSC  78.7
014D:  GOTO   152
014E:  RLF    79,F
014F:  RLF    78,F
0150:  DECF   77,F
0151:  GOTO   14B
0152:  BCF    78.7
0153:  BCF    0A.3
0154:  BCF    0A.4
0155:  GOTO   54C (RETURN)
0156:  MOVF   37,W
0157:  BTFSC  03.2
0158:  GOTO   1C6
0159:  MOVWF  3F
015A:  MOVF   3B,W
015B:  BTFSC  03.2
015C:  GOTO   1C6
015D:  ADDWF  3F,F
015E:  BTFSC  03.0
015F:  GOTO   167
0160:  MOVLW  7F
0161:  SUBWF  3F,F
0162:  BTFSS  03.0
0163:  GOTO   1C6
0164:  BTFSC  03.2
0165:  GOTO   1C6
0166:  GOTO   16B
0167:  MOVLW  81
0168:  ADDWF  3F,F
0169:  BTFSC  03.0
016A:  GOTO   1C6
016B:  MOVF   3F,W
016C:  MOVWF  77
016D:  CLRF   78
016E:  CLRF   79
016F:  CLRF   7A
0170:  MOVF   38,W
0171:  MOVWF  43
0172:  BSF    43.7
0173:  MOVF   39,W
0174:  MOVWF  42
0175:  MOVF   3A,W
0176:  MOVWF  41
0177:  MOVLW  18
0178:  MOVWF  3F
0179:  CLRF   40
017A:  BTFSS  41.0
017B:  GOTO   194
017C:  MOVF   3E,W
017D:  ADDWF  7A,F
017E:  BTFSS  03.0
017F:  GOTO   186
0180:  INCF   79,F
0181:  BTFSS  03.2
0182:  GOTO   186
0183:  INCF   78,F
0184:  BTFSC  03.2
0185:  BSF    40.7
0186:  MOVF   3D,W
0187:  ADDWF  79,F
0188:  BTFSS  03.0
0189:  GOTO   18D
018A:  INCF   78,F
018B:  BTFSC  03.2
018C:  BSF    40.7
018D:  MOVF   3C,W
018E:  MOVWF  39
018F:  BSF    39.7
0190:  MOVF   39,W
0191:  ADDWF  78,F
0192:  BTFSC  03.0
0193:  BSF    40.7
0194:  RLF    40,F
0195:  RRF    78,F
0196:  RRF    79,F
0197:  RRF    7A,F
0198:  RRF    43,F
0199:  RRF    42,F
019A:  RRF    41,F
019B:  BCF    03.0
019C:  DECFSZ 3F,F
019D:  GOTO   179
019E:  MOVLW  01
019F:  ADDWF  77,F
01A0:  BTFSC  03.0
01A1:  GOTO   1C6
01A2:  BTFSC  78.7
01A3:  GOTO   1AB
01A4:  RLF    43,F
01A5:  RLF    7A,F
01A6:  RLF    79,F
01A7:  RLF    78,F
01A8:  DECF   77,F
01A9:  BTFSC  03.2
01AA:  GOTO   1C6
01AB:  BTFSS  43.7
01AC:  GOTO   1BC
01AD:  INCF   7A,F
01AE:  BTFSS  03.2
01AF:  GOTO   1BC
01B0:  INCF   79,F
01B1:  BTFSS  03.2
01B2:  GOTO   1BC
01B3:  INCF   78,F
01B4:  BTFSS  03.2
01B5:  GOTO   1BC
01B6:  RRF    78,F
01B7:  RRF    79,F
01B8:  RRF    7A,F
01B9:  INCF   77,F
01BA:  BTFSC  03.2
01BB:  GOTO   1C6
01BC:  MOVF   38,W
01BD:  MOVWF  40
01BE:  MOVF   3C,W
01BF:  XORWF  40,F
01C0:  BTFSS  40.7
01C1:  GOTO   1C4
01C2:  BSF    78.7
01C3:  GOTO   1CA
01C4:  BCF    78.7
01C5:  GOTO   1CA
01C6:  CLRF   77
01C7:  CLRF   78
01C8:  CLRF   79
01C9:  CLRF   7A
01CA:  RETURN
01CB:  MOVF   2A,W
01CC:  BTFSC  03.2
01CD:  GOTO   290
01CE:  MOVWF  36
01CF:  MOVF   2E,W
01D0:  BTFSC  03.2
01D1:  GOTO   290
01D2:  SUBWF  36,F
01D3:  BTFSS  03.0
01D4:  GOTO   1DA
01D5:  MOVLW  7F
01D6:  ADDWF  36,F
01D7:  BTFSC  03.0
01D8:  GOTO   290
01D9:  GOTO   1E0
01DA:  MOVLW  81
01DB:  SUBWF  36,F
01DC:  BTFSS  03.0
01DD:  GOTO   290
01DE:  BTFSC  03.2
01DF:  GOTO   290
01E0:  MOVF   36,W
01E1:  MOVWF  77
01E2:  CLRF   78
01E3:  CLRF   79
01E4:  CLRF   7A
01E5:  CLRF   35
01E6:  MOVF   2B,W
01E7:  MOVWF  34
01E8:  BSF    34.7
01E9:  MOVF   2C,W
01EA:  MOVWF  33
01EB:  MOVF   2D,W
01EC:  MOVWF  32
01ED:  MOVLW  19
01EE:  MOVWF  36
01EF:  MOVF   31,W
01F0:  SUBWF  32,F
01F1:  BTFSC  03.0
01F2:  GOTO   203
01F3:  MOVLW  01
01F4:  SUBWF  33,F
01F5:  BTFSC  03.0
01F6:  GOTO   203
01F7:  SUBWF  34,F
01F8:  BTFSC  03.0
01F9:  GOTO   203
01FA:  SUBWF  35,F
01FB:  BTFSC  03.0
01FC:  GOTO   203
01FD:  INCF   35,F
01FE:  INCF   34,F
01FF:  INCF   33,F
0200:  MOVF   31,W
0201:  ADDWF  32,F
0202:  GOTO   235
0203:  MOVF   30,W
0204:  SUBWF  33,F
0205:  BTFSC  03.0
0206:  GOTO   21E
0207:  MOVLW  01
0208:  SUBWF  34,F
0209:  BTFSC  03.0
020A:  GOTO   21E
020B:  SUBWF  35,F
020C:  BTFSC  03.0
020D:  GOTO   21E
020E:  INCF   35,F
020F:  INCF   34,F
0210:  MOVF   30,W
0211:  ADDWF  33,F
0212:  MOVF   31,W
0213:  ADDWF  32,F
0214:  BTFSS  03.0
0215:  GOTO   235
0216:  INCF   33,F
0217:  BTFSS  03.2
0218:  GOTO   235
0219:  INCF   34,F
021A:  BTFSS  03.2
021B:  GOTO   235
021C:  INCF   35,F
021D:  GOTO   235
021E:  MOVF   2F,W
021F:  IORLW  80
0220:  SUBWF  34,F
0221:  BTFSC  03.0
0222:  GOTO   234
0223:  MOVLW  01
0224:  SUBWF  35,F
0225:  BTFSC  03.0
0226:  GOTO   234
0227:  INCF   35,F
0228:  MOVF   2F,W
0229:  IORLW  80
022A:  ADDWF  34,F
022B:  MOVF   30,W
022C:  ADDWF  33,F
022D:  BTFSS  03.0
022E:  GOTO   212
022F:  INCF   34,F
0230:  BTFSS  03.2
0231:  GOTO   212
0232:  INCF   35,F
0233:  GOTO   212
0234:  BSF    7A.0
0235:  DECFSZ 36,F
0236:  GOTO   238
0237:  GOTO   243
0238:  BCF    03.0
0239:  RLF    32,F
023A:  RLF    33,F
023B:  RLF    34,F
023C:  RLF    35,F
023D:  BCF    03.0
023E:  RLF    7A,F
023F:  RLF    79,F
0240:  RLF    78,F
0241:  RLF    37,F
0242:  GOTO   1EF
0243:  BTFSS  37.0
0244:  GOTO   24B
0245:  BCF    03.0
0246:  RRF    78,F
0247:  RRF    79,F
0248:  RRF    7A,F
0249:  RRF    37,F
024A:  GOTO   24E
024B:  DECF   77,F
024C:  BTFSC  03.2
024D:  GOTO   290
024E:  BTFSC  37.7
024F:  GOTO   277
0250:  BCF    03.0
0251:  RLF    32,F
0252:  RLF    33,F
0253:  RLF    34,F
0254:  RLF    35,F
0255:  MOVF   31,W
0256:  SUBWF  32,F
0257:  BTFSC  03.0
0258:  GOTO   263
0259:  MOVLW  01
025A:  SUBWF  33,F
025B:  BTFSC  03.0
025C:  GOTO   263
025D:  SUBWF  34,F
025E:  BTFSC  03.0
025F:  GOTO   263
0260:  SUBWF  35,F
0261:  BTFSS  03.0
0262:  GOTO   286
0263:  MOVF   30,W
0264:  SUBWF  33,F
0265:  BTFSC  03.0
0266:  GOTO   26E
0267:  MOVLW  01
0268:  SUBWF  34,F
0269:  BTFSC  03.0
026A:  GOTO   26E
026B:  SUBWF  35,F
026C:  BTFSS  03.0
026D:  GOTO   286
026E:  MOVF   2F,W
026F:  IORLW  80
0270:  SUBWF  34,F
0271:  BTFSC  03.0
0272:  GOTO   277
0273:  MOVLW  01
0274:  SUBWF  35,F
0275:  BTFSS  03.0
0276:  GOTO   286
0277:  INCF   7A,F
0278:  BTFSS  03.2
0279:  GOTO   286
027A:  INCF   79,F
027B:  BTFSS  03.2
027C:  GOTO   286
027D:  INCF   78,F
027E:  BTFSS  03.2
027F:  GOTO   286
0280:  INCF   77,F
0281:  BTFSC  03.2
0282:  GOTO   290
0283:  RRF    78,F
0284:  RRF    79,F
0285:  RRF    7A,F
0286:  MOVF   2B,W
0287:  MOVWF  36
0288:  MOVF   2F,W
0289:  XORWF  36,F
028A:  BTFSS  36.7
028B:  GOTO   28E
028C:  BSF    78.7
028D:  GOTO   294
028E:  BCF    78.7
028F:  GOTO   294
0290:  CLRF   77
0291:  CLRF   78
0292:  CLRF   79
0293:  CLRF   7A
0294:  BCF    0A.3
0295:  BCF    0A.4
0296:  GOTO   574 (RETURN)
0297:  MOVLW  80
0298:  BTFSC  03.1
0299:  XORWF  33,F
029A:  CLRF   38
029B:  CLRF   39
029C:  MOVF   2F,W
029D:  MOVWF  37
029E:  MOVF   33,W
029F:  XORWF  37,F
02A0:  MOVF   2E,W
02A1:  BTFSC  03.2
02A2:  GOTO   387
02A3:  MOVWF  36
02A4:  MOVWF  77
02A5:  MOVF   32,W
02A6:  BTFSC  03.2
02A7:  GOTO   390
02A8:  SUBWF  36,F
02A9:  BTFSC  03.2
02AA:  GOTO   32C
02AB:  BTFSS  03.0
02AC:  GOTO   2EA
02AD:  MOVF   33,W
02AE:  MOVWF  3C
02AF:  BSF    3C.7
02B0:  MOVF   34,W
02B1:  MOVWF  3B
02B2:  MOVF   35,W
02B3:  MOVWF  3A
02B4:  CLRF   39
02B5:  BCF    03.0
02B6:  RRF    3C,F
02B7:  RRF    3B,F
02B8:  RRF    3A,F
02B9:  RRF    39,F
02BA:  DECFSZ 36,F
02BB:  GOTO   2B4
02BC:  BTFSS  37.7
02BD:  GOTO   2C1
02BE:  BSF    38.0
02BF:  GOTO   3A4
02C0:  BCF    38.0
02C1:  BCF    36.0
02C2:  BSF    38.4
02C3:  MOVLW  31
02C4:  MOVWF  04
02C5:  BCF    03.7
02C6:  GOTO   3B9
02C7:  BCF    38.4
02C8:  BTFSC  37.7
02C9:  GOTO   2D4
02CA:  BTFSS  36.0
02CB:  GOTO   2DF
02CC:  RRF    3C,F
02CD:  RRF    3B,F
02CE:  RRF    3A,F
02CF:  RRF    39,F
02D0:  INCF   77,F
02D1:  BTFSC  03.2
02D2:  GOTO   39F
02D3:  GOTO   2DF
02D4:  BTFSC  3C.7
02D5:  GOTO   2E2
02D6:  BCF    03.0
02D7:  RLF    39,F
02D8:  RLF    3A,F
02D9:  RLF    3B,F
02DA:  RLF    3C,F
02DB:  DECF   77,F
02DC:  BTFSC  03.2
02DD:  GOTO   39F
02DE:  GOTO   2D4
02DF:  BSF    38.6
02E0:  GOTO   34C
02E1:  BCF    38.6
02E2:  MOVF   2F,W
02E3:  MOVWF  37
02E4:  BTFSS  37.7
02E5:  GOTO   2E8
02E6:  BSF    3C.7
02E7:  GOTO   398
02E8:  BCF    3C.7
02E9:  GOTO   398
02EA:  MOVF   32,W
02EB:  MOVWF  36
02EC:  MOVWF  77
02ED:  MOVF   2E,W
02EE:  SUBWF  36,F
02EF:  MOVF   2F,W
02F0:  MOVWF  3C
02F1:  BSF    3C.7
02F2:  MOVF   30,W
02F3:  MOVWF  3B
02F4:  MOVF   31,W
02F5:  MOVWF  3A
02F6:  CLRF   39
02F7:  BCF    03.0
02F8:  RRF    3C,F
02F9:  RRF    3B,F
02FA:  RRF    3A,F
02FB:  RRF    39,F
02FC:  DECFSZ 36,F
02FD:  GOTO   2F6
02FE:  BTFSS  37.7
02FF:  GOTO   303
0300:  BSF    38.1
0301:  GOTO   3A4
0302:  BCF    38.1
0303:  BCF    36.0
0304:  BSF    38.5
0305:  MOVLW  35
0306:  MOVWF  04
0307:  BCF    03.7
0308:  GOTO   3B9
0309:  BCF    38.5
030A:  BTFSC  37.7
030B:  GOTO   316
030C:  BTFSS  36.0
030D:  GOTO   321
030E:  RRF    3C,F
030F:  RRF    3B,F
0310:  RRF    3A,F
0311:  RRF    39,F
0312:  INCF   77,F
0313:  BTFSC  03.2
0314:  GOTO   39F
0315:  GOTO   321
0316:  BTFSC  3C.7
0317:  GOTO   324
0318:  BCF    03.0
0319:  RLF    39,F
031A:  RLF    3A,F
031B:  RLF    3B,F
031C:  RLF    3C,F
031D:  DECF   77,F
031E:  BTFSC  03.2
031F:  GOTO   39F
0320:  GOTO   316
0321:  BSF    38.7
0322:  GOTO   34C
0323:  BCF    38.7
0324:  MOVF   33,W
0325:  MOVWF  37
0326:  BTFSS  37.7
0327:  GOTO   32A
0328:  BSF    3C.7
0329:  GOTO   398
032A:  BCF    3C.7
032B:  GOTO   398
032C:  MOVF   33,W
032D:  MOVWF  3C
032E:  BSF    3C.7
032F:  MOVF   34,W
0330:  MOVWF  3B
0331:  MOVF   35,W
0332:  MOVWF  3A
0333:  BTFSS  37.7
0334:  GOTO   339
0335:  BCF    3C.7
0336:  BSF    38.2
0337:  GOTO   3A4
0338:  BCF    38.2
0339:  CLRF   39
033A:  BCF    36.0
033B:  MOVLW  31
033C:  MOVWF  04
033D:  BCF    03.7
033E:  GOTO   3B9
033F:  BTFSC  37.7
0340:  GOTO   362
0341:  MOVF   2F,W
0342:  MOVWF  37
0343:  BTFSS  36.0
0344:  GOTO   34C
0345:  RRF    3C,F
0346:  RRF    3B,F
0347:  RRF    3A,F
0348:  RRF    39,F
0349:  INCF   77,F
034A:  BTFSC  03.2
034B:  GOTO   39F
034C:  BTFSS  39.7
034D:  GOTO   35D
034E:  INCF   3A,F
034F:  BTFSS  03.2
0350:  GOTO   35D
0351:  INCF   3B,F
0352:  BTFSS  03.2
0353:  GOTO   35D
0354:  INCF   3C,F
0355:  BTFSS  03.2
0356:  GOTO   35D
0357:  RRF    3C,F
0358:  RRF    3B,F
0359:  RRF    3A,F
035A:  INCF   77,F
035B:  BTFSC  03.2
035C:  GOTO   39F
035D:  BTFSC  38.6
035E:  GOTO   2E1
035F:  BTFSC  38.7
0360:  GOTO   323
0361:  GOTO   381
0362:  MOVLW  80
0363:  XORWF  3C,F
0364:  BTFSS  3C.7
0365:  GOTO   36A
0366:  GOTO   3A4
0367:  MOVF   33,W
0368:  MOVWF  37
0369:  GOTO   377
036A:  MOVF   2F,W
036B:  MOVWF  37
036C:  MOVF   3C,F
036D:  BTFSS  03.2
036E:  GOTO   377
036F:  MOVF   3B,F
0370:  BTFSS  03.2
0371:  GOTO   377
0372:  MOVF   3A,F
0373:  BTFSS  03.2
0374:  GOTO   377
0375:  CLRF   77
0376:  GOTO   398
0377:  BTFSC  3C.7
0378:  GOTO   381
0379:  BCF    03.0
037A:  RLF    39,F
037B:  RLF    3A,F
037C:  RLF    3B,F
037D:  RLF    3C,F
037E:  DECFSZ 77,F
037F:  GOTO   377
0380:  GOTO   39F
0381:  BTFSS  37.7
0382:  GOTO   385
0383:  BSF    3C.7
0384:  GOTO   398
0385:  BCF    3C.7
0386:  GOTO   398
0387:  MOVF   32,W
0388:  MOVWF  77
0389:  MOVF   33,W
038A:  MOVWF  3C
038B:  MOVF   34,W
038C:  MOVWF  3B
038D:  MOVF   35,W
038E:  MOVWF  3A
038F:  GOTO   398
0390:  MOVF   2E,W
0391:  MOVWF  77
0392:  MOVF   2F,W
0393:  MOVWF  3C
0394:  MOVF   30,W
0395:  MOVWF  3B
0396:  MOVF   31,W
0397:  MOVWF  3A
0398:  MOVF   3C,W
0399:  MOVWF  78
039A:  MOVF   3B,W
039B:  MOVWF  79
039C:  MOVF   3A,W
039D:  MOVWF  7A
039E:  GOTO   3D7
039F:  CLRF   77
03A0:  CLRF   78
03A1:  CLRF   79
03A2:  CLRF   7A
03A3:  GOTO   3D7
03A4:  CLRF   39
03A5:  COMF   3A,F
03A6:  COMF   3B,F
03A7:  COMF   3C,F
03A8:  COMF   39,F
03A9:  INCF   39,F
03AA:  BTFSS  03.2
03AB:  GOTO   3B2
03AC:  INCF   3A,F
03AD:  BTFSS  03.2
03AE:  GOTO   3B2
03AF:  INCF   3B,F
03B0:  BTFSC  03.2
03B1:  INCF   3C,F
03B2:  BTFSC  38.0
03B3:  GOTO   2C0
03B4:  BTFSC  38.1
03B5:  GOTO   302
03B6:  BTFSC  38.2
03B7:  GOTO   338
03B8:  GOTO   367
03B9:  MOVF   00,W
03BA:  ADDWF  3A,F
03BB:  BTFSS  03.0
03BC:  GOTO   3C3
03BD:  INCF   3B,F
03BE:  BTFSS  03.2
03BF:  GOTO   3C3
03C0:  INCF   3C,F
03C1:  BTFSC  03.2
03C2:  BSF    36.0
03C3:  DECF   04,F
03C4:  MOVF   00,W
03C5:  ADDWF  3B,F
03C6:  BTFSS  03.0
03C7:  GOTO   3CB
03C8:  INCF   3C,F
03C9:  BTFSC  03.2
03CA:  BSF    36.0
03CB:  DECF   04,F
03CC:  MOVF   00,W
03CD:  BTFSS  00.7
03CE:  XORLW  80
03CF:  ADDWF  3C,F
03D0:  BTFSC  03.0
03D1:  BSF    36.0
03D2:  BTFSC  38.4
03D3:  GOTO   2C7
03D4:  BTFSC  38.5
03D5:  GOTO   309
03D6:  GOTO   33F
03D7:  BCF    0A.3
03D8:  BCF    0A.4
03D9:  GOTO   58B (RETURN)
03DA:  BTFSC  03.1
03DB:  GOTO   3DF
03DC:  MOVLW  3F
03DD:  MOVWF  04
03DE:  BCF    03.7
03DF:  CLRF   77
03E0:  CLRF   78
03E1:  CLRF   79
03E2:  CLRF   7A
03E3:  CLRF   3F
03E4:  CLRF   40
03E5:  CLRF   41
03E6:  CLRF   42
03E7:  MOVF   3E,W
03E8:  IORWF  3D,W
03E9:  IORWF  3C,W
03EA:  IORWF  3B,W
03EB:  BTFSC  03.2
03EC:  GOTO   41D
03ED:  MOVLW  20
03EE:  MOVWF  43
03EF:  BCF    03.0
03F0:  RLF    37,F
03F1:  RLF    38,F
03F2:  RLF    39,F
03F3:  RLF    3A,F
03F4:  RLF    3F,F
03F5:  RLF    40,F
03F6:  RLF    41,F
03F7:  RLF    42,F
03F8:  MOVF   3E,W
03F9:  SUBWF  42,W
03FA:  BTFSS  03.2
03FB:  GOTO   406
03FC:  MOVF   3D,W
03FD:  SUBWF  41,W
03FE:  BTFSS  03.2
03FF:  GOTO   406
0400:  MOVF   3C,W
0401:  SUBWF  40,W
0402:  BTFSS  03.2
0403:  GOTO   406
0404:  MOVF   3B,W
0405:  SUBWF  3F,W
0406:  BTFSS  03.0
0407:  GOTO   417
0408:  MOVF   3B,W
0409:  SUBWF  3F,F
040A:  MOVF   3C,W
040B:  BTFSS  03.0
040C:  INCFSZ 3C,W
040D:  SUBWF  40,F
040E:  MOVF   3D,W
040F:  BTFSS  03.0
0410:  INCFSZ 3D,W
0411:  SUBWF  41,F
0412:  MOVF   3E,W
0413:  BTFSS  03.0
0414:  INCFSZ 3E,W
0415:  SUBWF  42,F
0416:  BSF    03.0
0417:  RLF    77,F
0418:  RLF    78,F
0419:  RLF    79,F
041A:  RLF    7A,F
041B:  DECFSZ 43,F
041C:  GOTO   3EF
041D:  MOVF   3F,W
041E:  MOVWF  00
041F:  INCF   04,F
0420:  MOVF   40,W
0421:  MOVWF  00
0422:  INCF   04,F
0423:  MOVF   41,W
0424:  MOVWF  00
0425:  INCF   04,F
0426:  MOVF   42,W
0427:  MOVWF  00
0428:  RETURN
0429:  MOVF   04,W
042A:  MOVWF  2F
042B:  MOVF   2E,W
042C:  MOVWF  31
042D:  BTFSC  03.2
042E:  GOTO   448
042F:  MOVF   2D,W
0430:  MOVWF  3A
0431:  MOVF   2C,W
0432:  MOVWF  39
0433:  MOVF   2B,W
0434:  MOVWF  38
0435:  MOVF   2A,W
0436:  MOVWF  37
0437:  CLRF   3E
0438:  CLRF   3D
0439:  MOVLW  20
043A:  MOVWF  3C
043B:  MOVLW  82
043C:  MOVWF  3B
043D:  CALL   156
043E:  MOVF   7A,W
043F:  MOVWF  2D
0440:  MOVF   79,W
0441:  MOVWF  2C
0442:  MOVF   78,W
0443:  MOVWF  2B
0444:  MOVF   77,W
0445:  MOVWF  2A
0446:  DECFSZ 31,F
0447:  GOTO   42F
0448:  MOVF   2D,W
0449:  MOVWF  3A
044A:  MOVF   2C,W
044B:  MOVWF  39
044C:  MOVF   2B,W
044D:  MOVWF  38
044E:  MOVF   2A,W
044F:  MOVWF  37
0450:  MOVF   37,W
0451:  SUBLW  B6
0452:  MOVWF  37
0453:  CLRF   7A
0454:  MOVF   38,W
0455:  MOVWF  3B
0456:  BSF    38.7
0457:  BCF    03.0
0458:  RRF    38,F
0459:  RRF    39,F
045A:  RRF    3A,F
045B:  RRF    7A,F
045C:  RRF    79,F
045D:  RRF    78,F
045E:  RRF    77,F
045F:  DECFSZ 37,F
0460:  GOTO   457
0461:  BTFSS  3B.7
0462:  GOTO   46E
0463:  COMF   77,F
0464:  COMF   78,F
0465:  COMF   79,F
0466:  COMF   7A,F
0467:  INCF   77,F
0468:  BTFSC  03.2
0469:  INCF   78,F
046A:  BTFSC  03.2
046B:  INCF   79,F
046C:  BTFSC  03.2
046D:  INCF   7A,F
046E:  MOVF   7A,W
046F:  MOVWF  2D
0470:  MOVF   79,W
0471:  MOVWF  2C
0472:  MOVF   78,W
0473:  MOVWF  2B
0474:  MOVF   77,W
0475:  MOVWF  2A
0476:  BTFSS  2D.7
0477:  GOTO   485
0478:  DECF   2F,F
0479:  BSF    2F.5
047A:  COMF   2A,F
047B:  COMF   2B,F
047C:  COMF   2C,F
047D:  COMF   2D,F
047E:  INCF   2A,F
047F:  BTFSC  03.2
0480:  INCF   2B,F
0481:  BTFSC  03.2
0482:  INCF   2C,F
0483:  BTFSC  03.2
0484:  INCF   2D,F
0485:  MOVLW  3B
0486:  MOVWF  36
0487:  MOVLW  9A
0488:  MOVWF  35
0489:  MOVLW  CA
048A:  MOVWF  34
048B:  CLRF   33
048C:  MOVLW  0A
048D:  MOVWF  31
048E:  MOVF   2E,W
048F:  BTFSC  03.2
0490:  INCF   2F,F
0491:  BSF    03.1
0492:  MOVLW  2A
0493:  MOVWF  04
0494:  BCF    03.7
0495:  MOVF   2D,W
0496:  MOVWF  3A
0497:  MOVF   2C,W
0498:  MOVWF  39
0499:  MOVF   2B,W
049A:  MOVWF  38
049B:  MOVF   2A,W
049C:  MOVWF  37
049D:  MOVF   36,W
049E:  MOVWF  3E
049F:  MOVF   35,W
04A0:  MOVWF  3D
04A1:  MOVF   34,W
04A2:  MOVWF  3C
04A3:  MOVF   33,W
04A4:  MOVWF  3B
04A5:  CALL   3DA
04A6:  MOVF   78,W
04A7:  MOVF   77,F
04A8:  BTFSS  03.2
04A9:  GOTO   4BD
04AA:  INCF   2E,W
04AB:  SUBWF  31,W
04AC:  BTFSC  03.2
04AD:  GOTO   4BD
04AE:  MOVF   2F,W
04AF:  BTFSC  03.2
04B0:  GOTO   4BF
04B1:  ANDLW  0F
04B2:  SUBWF  31,W
04B3:  BTFSC  03.2
04B4:  GOTO   4B7
04B5:  BTFSC  03.0
04B6:  GOTO   4EF
04B7:  BTFSC  2F.7
04B8:  GOTO   4EF
04B9:  BTFSC  2F.6
04BA:  GOTO   4BF
04BB:  MOVLW  20
04BC:  GOTO   4EB
04BD:  MOVLW  20
04BE:  ANDWF  2F,F
04BF:  BTFSS  2F.5
04C0:  GOTO   4CD
04C1:  BCF    2F.5
04C2:  MOVF   2E,W
04C3:  BTFSS  03.2
04C4:  DECF   2F,F
04C5:  MOVF   77,W
04C6:  MOVWF  2F
04C7:  MOVLW  2D
04C8:  MOVWF  37
04C9:  CALL   0BE
04CA:  MOVF   2F,W
04CB:  MOVWF  77
04CC:  CLRF   2F
04CD:  MOVF   2E,W
04CE:  SUBWF  31,W
04CF:  BTFSS  03.2
04D0:  GOTO   4DB
04D1:  MOVF   77,W
04D2:  MOVWF  2F
04D3:  MOVLW  2E
04D4:  MOVWF  37
04D5:  CALL   0BE
04D6:  MOVF   2F,W
04D7:  MOVWF  77
04D8:  MOVLW  20
04D9:  ANDWF  2F,F
04DA:  MOVLW  00
04DB:  MOVLW  30
04DC:  BTFSS  2F.5
04DD:  GOTO   4EB
04DE:  BCF    2F.5
04DF:  MOVF   2E,W
04E0:  BTFSS  03.2
04E1:  DECF   2F,F
04E2:  MOVF   77,W
04E3:  MOVWF  2F
04E4:  MOVLW  2D
04E5:  MOVWF  37
04E6:  CALL   0BE
04E7:  MOVF   2F,W
04E8:  MOVWF  77
04E9:  CLRF   2F
04EA:  MOVLW  30
04EB:  ADDWF  77,F
04EC:  MOVF   77,W
04ED:  MOVWF  37
04EE:  CALL   0BE
04EF:  BCF    03.1
04F0:  MOVF   36,W
04F1:  MOVWF  3A
04F2:  MOVF   35,W
04F3:  MOVWF  39
04F4:  MOVF   34,W
04F5:  MOVWF  38
04F6:  MOVF   33,W
04F7:  MOVWF  37
04F8:  CLRF   3E
04F9:  CLRF   3D
04FA:  CLRF   3C
04FB:  MOVLW  0A
04FC:  MOVWF  3B
04FD:  CALL   3DA
04FE:  MOVF   7A,W
04FF:  MOVWF  36
0500:  MOVF   79,W
0501:  MOVWF  35
0502:  MOVF   78,W
0503:  MOVWF  34
0504:  MOVF   77,W
0505:  MOVWF  33
0506:  DECFSZ 31,F
0507:  GOTO   491
0508:  BCF    0A.3
0509:  BCF    0A.4
050A:  GOTO   5A5 (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=10 // analogtan gelen deðer ne ise onu 10 bittik deðere dönüþtürüyoruz. Yani gelen deðer 0 ile 1023 arasýnda birdeðere dönüþtürülür.  
.................... #use delay(clock=4000000) // 
*
0012:  MOVLW  38
0013:  MOVWF  04
0014:  BCF    03.7
0015:  MOVF   00,W
0016:  BTFSC  03.2
0017:  GOTO   026
0018:  MOVLW  01
0019:  MOVWF  78
001A:  CLRF   77
001B:  DECFSZ 77,F
001C:  GOTO   01B
001D:  DECFSZ 78,F
001E:  GOTO   01A
001F:  MOVLW  4A
0020:  MOVWF  77
0021:  DECFSZ 77,F
0022:  GOTO   021
0023:  GOTO   024
0024:  DECFSZ 00,F
0025:  GOTO   018
0026:  RETURN
.................... #fuses XT,NOWDT,NOPUT,NOLVP,NOCPD,NOPROTECT,NODEBUG,NOBROWNOUT,NOWRT 
....................  
.................... #use fast_io(a) // portA kullanýcaðýmýzý belirtiyoruz 
.................... #use fast_io(b) // portB kullanýcaðýmýzý belirtiyoruz 
....................  
.................... #define use_portb_lcd TRUE // Lcd tanýmlýyoruz 
.................... #include <lcd.c> // lcd kütüphanesini tanýmlýyoruz. 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
003F:  MOVLW  0F
0040:  BSF    03.5
0041:  ANDWF  06,W
0042:  IORLW  F0
0043:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0044:  BCF    03.5
0045:  BSF    06.2
....................    delay_cycles(1); 
0046:  NOP
....................    lcd_output_enable(1); 
0047:  BSF    06.0
....................    delay_cycles(1); 
0048:  NOP
....................    high = lcd_read_nibble(); 
0049:  CALL   033
004A:  MOVF   78,W
004B:  MOVWF  3F
....................        
....................    lcd_output_enable(0); 
004C:  BCF    06.0
....................    delay_cycles(1); 
004D:  NOP
....................    lcd_output_enable(1); 
004E:  BSF    06.0
....................    delay_us(1); 
004F:  NOP
....................    low = lcd_read_nibble(); 
0050:  CALL   033
0051:  MOVF   78,W
0052:  MOVWF  3E
....................        
....................    lcd_output_enable(0); 
0053:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0054:  MOVLW  0F
0055:  BSF    03.5
0056:  ANDWF  06,W
0057:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0058:  BCF    03.5
0059:  SWAPF  3F,W
005A:  MOVWF  77
005B:  MOVLW  F0
005C:  ANDWF  77,F
005D:  MOVF   77,W
005E:  IORWF  3E,W
005F:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0033:  MOVF   06,W
0034:  MOVWF  77
0035:  SWAPF  06,W
0036:  ANDLW  0F
0037:  MOVWF  78
....................   #endif 
0038:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0027:  SWAPF  3F,W
0028:  ANDLW  F0
0029:  MOVWF  77
002A:  MOVLW  0F
002B:  ANDWF  06,W
002C:  IORWF  77,W
002D:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
002E:  NOP
....................    lcd_output_enable(1); 
002F:  BSF    06.0
....................    delay_us(2); 
0030:  GOTO   031
....................    lcd_output_enable(0); 
0031:  BCF    06.0
0032:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0039:  BSF    03.5
003A:  BCF    06.0
....................    lcd_rs_tris(); 
003B:  BCF    06.1
....................    lcd_rw_tris(); 
003C:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
003D:  BCF    03.5
003E:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0060:  MOVF   78,W
0061:  MOVWF  3E
0062:  BTFSC  3E.7
0063:  GOTO   03F
....................    lcd_output_rs(address); 
0064:  BTFSS  3C.0
0065:  BCF    06.1
0066:  BTFSC  3C.0
0067:  BSF    06.1
....................    delay_cycles(1); 
0068:  NOP
....................    lcd_output_rw(0); 
0069:  BCF    06.2
....................    delay_cycles(1); 
006A:  NOP
....................    lcd_output_enable(0); 
006B:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
006C:  SWAPF  3D,W
006D:  MOVWF  3E
006E:  MOVLW  0F
006F:  ANDWF  3E,F
0070:  MOVF   3E,W
0071:  MOVWF  3F
0072:  CALL   027
....................    lcd_send_nibble(n & 0xf); 
0073:  MOVF   3D,W
0074:  ANDLW  0F
0075:  MOVWF  3E
0076:  MOVWF  3F
0077:  CALL   027
0078:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0079:  MOVLW  0F
007A:  BSF    03.5
007B:  ANDWF  06,W
007C:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
007D:  BCF    06.0
....................    lcd_rs_tris(); 
007E:  BCF    06.1
....................    lcd_rw_tris(); 
007F:  BCF    06.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
0080:  BCF    03.5
0081:  BCF    06.1
....................    lcd_output_rw(0); 
0082:  BCF    06.2
....................    lcd_output_enable(0); 
0083:  BCF    06.0
....................      
....................    delay_ms(15); 
0084:  MOVLW  0F
0085:  MOVWF  38
0086:  CALL   012
....................    for(i=1;i<=3;++i) 
0087:  MOVLW  01
0088:  MOVWF  2A
0089:  MOVF   2A,W
008A:  SUBLW  03
008B:  BTFSS  03.0
008C:  GOTO   095
....................    { 
....................        lcd_send_nibble(3); 
008D:  MOVLW  03
008E:  MOVWF  3F
008F:  CALL   027
....................        delay_ms(5); 
0090:  MOVLW  05
0091:  MOVWF  38
0092:  CALL   012
0093:  INCF   2A,F
0094:  GOTO   089
....................    } 
....................     
....................    lcd_send_nibble(2); 
0095:  MOVLW  02
0096:  MOVWF  3F
0097:  CALL   027
....................    delay_ms(5); 
0098:  MOVLW  05
0099:  MOVWF  38
009A:  CALL   012
....................    for(i=0;i<=3;++i) 
009B:  CLRF   2A
009C:  MOVF   2A,W
009D:  SUBLW  03
009E:  BTFSS  03.0
009F:  GOTO   0A9
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00A0:  MOVF   2A,W
00A1:  CALL   004
00A2:  MOVWF  2B
00A3:  CLRF   3C
00A4:  MOVF   2B,W
00A5:  MOVWF  3D
00A6:  CALL   039
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00A7:  INCF   2A,F
00A8:  GOTO   09C
00A9:  BCF    0A.3
00AA:  BCF    0A.4
00AB:  GOTO   520 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00AC:  DECFSZ 39,W
00AD:  GOTO   0AF
00AE:  GOTO   0B2
....................       address=LCD_LINE_TWO; 
00AF:  MOVLW  40
00B0:  MOVWF  3A
00B1:  GOTO   0B3
....................    else 
....................       address=0; 
00B2:  CLRF   3A
....................       
....................    address+=x-1; 
00B3:  MOVLW  01
00B4:  SUBWF  38,W
00B5:  ADDWF  3A,F
....................    lcd_send_byte(0,0x80|address); 
00B6:  MOVF   3A,W
00B7:  IORLW  80
00B8:  MOVWF  3B
00B9:  CLRF   3C
00BA:  MOVF   3B,W
00BB:  MOVWF  3D
00BC:  CALL   039
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00BD:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00BE:  MOVF   37,W
00BF:  XORLW  07
00C0:  BTFSC  03.2
00C1:  GOTO   0CC
00C2:  XORLW  0B
00C3:  BTFSC  03.2
00C4:  GOTO   0D1
00C5:  XORLW  06
00C6:  BTFSC  03.2
00C7:  GOTO   0D9
00C8:  XORLW  02
00C9:  BTFSC  03.2
00CA:  GOTO   0DF
00CB:  GOTO   0E4
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00CC:  MOVLW  01
00CD:  MOVWF  38
00CE:  MOVWF  39
00CF:  CALL   0AC
00D0:  GOTO   0E9
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00D1:  CLRF   3C
00D2:  MOVLW  01
00D3:  MOVWF  3D
00D4:  CALL   039
....................                      delay_ms(2); 
00D5:  MOVLW  02
00D6:  MOVWF  38
00D7:  CALL   012
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00D8:  GOTO   0E9
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00D9:  MOVLW  01
00DA:  MOVWF  38
00DB:  MOVLW  02
00DC:  MOVWF  39
00DD:  CALL   0AC
00DE:  GOTO   0E9
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00DF:  CLRF   3C
00E0:  MOVLW  10
00E1:  MOVWF  3D
00E2:  CALL   039
00E3:  GOTO   0E9
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
00E4:  MOVLW  01
00E5:  MOVWF  3C
00E6:  MOVF   37,W
00E7:  MOVWF  3D
00E8:  CALL   039
....................      #endif 
....................    } 
00E9:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... //Global deðiþkenler tanýmý yapýyoruz. 
.................... unsigned long int deger;  
.................... float gerilim,sicaklik; 
....................  
.................... //Ana fonksiyon tanýmý  
.................... void main() 
*
050B:  BSF    03.5
050C:  BSF    1F.0
050D:  BSF    1F.1
050E:  BSF    1F.2
050F:  BCF    1F.3
0510:  BCF    03.7
0511:  MOVLW  1F
0512:  ANDWF  03,F
.................... { 
....................    setup_psp(PSP_DISABLED); 
0513:  BCF    09.4
....................    setup_timer_1(T1_DISABLED); 
0514:  BCF    03.5
0515:  CLRF   10
....................    setup_CCP1(CCP_OFF); 
0516:  MOVLW  F0
0517:  ANDWF  17,F
....................    setup_CCP2(CCP_OFF); 
0518:  ANDWF  1D,F
....................     
....................    set_tris_a(0x20); // a portunun giriþ portu olduðunu bildiriyoruz. 
0519:  MOVLW  20
051A:  BSF    03.5
051B:  MOVWF  05
....................    set_tris_b(0x00); //  b portunun da hepsini çýkýþ olduðunu tanýmlýyoruz. 
051C:  MOVLW  00
051D:  MOVWF  06
....................     
....................    lcd_init(); // lcd baþlatma fonksiyonu 
051E:  BCF    03.5
051F:  GOTO   079
....................     
....................    setup_adc(adc_clock_div_32); // A/D biriminin mod ayarý kullanýlacak frekans bildirilir. 
0520:  BCF    1F.6
0521:  BSF    1F.7
0522:  BSF    03.5
0523:  BSF    1F.7
0524:  BCF    03.5
0525:  BSF    1F.0
....................    setup_adc_ports(ALL_ANALOG);  
0526:  BSF    03.5
0527:  BCF    1F.0
0528:  BCF    1F.1
0529:  BCF    1F.2
052A:  BCF    1F.3
....................     
....................    set_adc_channel(4); // kanalý tanýmlama yapýyoruz.  AN4 prortuna sýcaklýk ölçer baðlý olduðundan ona baðlýyoruz. 
052B:  MOVLW  20
052C:  MOVWF  78
052D:  BCF    03.5
052E:  MOVF   1F,W
052F:  ANDLW  C7
0530:  IORWF  78,W
0531:  MOVWF  1F
....................    delay_us(20); // Bekleme fonksiyonu 
0532:  MOVLW  06
0533:  MOVWF  77
0534:  DECFSZ 77,F
0535:  GOTO   534
0536:  NOP
....................     
....................    printf(lcd_putc,"\fSicaklik ="); // Termometre ekranýna yazdýrama iþlemi yapýyoruz. \f de ekraný temizliyor. 
0537:  MOVLW  0C
0538:  BSF    03.6
0539:  MOVWF  0D
053A:  MOVLW  00
053B:  MOVWF  0F
053C:  BCF    03.6
053D:  GOTO   0EA
....................     
....................    while(true){ 
....................        
....................       deger=read_adc(); // Analog sinyal ijital veriye cevrilir ve degere atanýr. 
053E:  BSF    1F.2
053F:  BTFSC  1F.2
0540:  GOTO   53F
0541:  BSF    03.5
0542:  MOVF   1E,W
0543:  BCF    03.5
0544:  MOVWF  20
0545:  MOVF   1E,W
0546:  MOVWF  21
....................       /* Okunan deðeri ondalýklý ve derece cinsine cevirme iþlemin matematiksel iþlemi: 
....................          5V(en büyük deðerimiz) deðeri 1023 bölüyoruz çünkü ADC deðeri 10 bitlik olduðundan buraadan sonuc 0.0048759 V olur 
....................          1000 mv = 1 V olduðundan  
....................          0.0048759 V da 4.88759 olur. 
....................          0 mV = 1 derecedir 
....................          10 mv = 3 derecedir. 
....................          buradan denklem oluþturursak her mV'tu 10'a' bölüp + 2 eklersek deðere ulaþmýþ oluruz. 
....................       */ 
....................       gerilim=deger*4.88759; 
0547:  MOVF   21,W
0548:  MOVWF  2B
0549:  MOVF   20,W
054A:  MOVWF  2A
054B:  GOTO   137
054C:  MOVF   7A,W
054D:  MOVWF  3A
054E:  MOVF   79,W
054F:  MOVWF  39
0550:  MOVF   78,W
0551:  MOVWF  38
0552:  MOVF   77,W
0553:  MOVWF  37
0554:  MOVLW  23
0555:  MOVWF  3E
0556:  MOVLW  67
0557:  MOVWF  3D
0558:  MOVLW  1C
0559:  MOVWF  3C
055A:  MOVLW  81
055B:  MOVWF  3B
055C:  CALL   156
055D:  MOVF   7A,W
055E:  MOVWF  25
055F:  MOVF   79,W
0560:  MOVWF  24
0561:  MOVF   78,W
0562:  MOVWF  23
0563:  MOVF   77,W
0564:  MOVWF  22
....................       sicaklik=(gerilim/10)+2;  
0565:  MOVF   25,W
0566:  MOVWF  2D
0567:  MOVF   24,W
0568:  MOVWF  2C
0569:  MOVF   23,W
056A:  MOVWF  2B
056B:  MOVF   22,W
056C:  MOVWF  2A
056D:  CLRF   31
056E:  CLRF   30
056F:  MOVLW  20
0570:  MOVWF  2F
0571:  MOVLW  82
0572:  MOVWF  2E
0573:  GOTO   1CB
0574:  MOVF   7A,W
0575:  MOVWF  2D
0576:  MOVF   79,W
0577:  MOVWF  2C
0578:  MOVF   78,W
0579:  MOVWF  2B
057A:  MOVF   77,W
057B:  MOVWF  2A
057C:  BCF    03.1
057D:  MOVF   7A,W
057E:  MOVWF  31
057F:  MOVF   79,W
0580:  MOVWF  30
0581:  MOVF   78,W
0582:  MOVWF  2F
0583:  MOVF   77,W
0584:  MOVWF  2E
0585:  CLRF   35
0586:  CLRF   34
0587:  CLRF   33
0588:  MOVLW  80
0589:  MOVWF  32
058A:  GOTO   297
058B:  MOVF   7A,W
058C:  MOVWF  29
058D:  MOVF   79,W
058E:  MOVWF  28
058F:  MOVF   78,W
0590:  MOVWF  27
0591:  MOVF   77,W
0592:  MOVWF  26
....................       lcd_gotoxy(10,1); // lcd ekranýný 1 satýrda 10 birim kaydýrýyoruz.  
0593:  MOVLW  0A
0594:  MOVWF  38
0595:  MOVLW  01
0596:  MOVWF  39
0597:  CALL   0AC
....................       printf(lcd_putc,"%f C",sicaklik);  // ekrana sicaklik deðerini yazdýrýyoruz.  
0598:  MOVLW  89
0599:  MOVWF  04
059A:  MOVF   29,W
059B:  MOVWF  2D
059C:  MOVF   28,W
059D:  MOVWF  2C
059E:  MOVF   27,W
059F:  MOVWF  2B
05A0:  MOVF   26,W
05A1:  MOVWF  2A
05A2:  MOVLW  02
05A3:  MOVWF  2E
05A4:  GOTO   429
05A5:  MOVLW  20
05A6:  MOVWF  37
05A7:  CALL   0BE
05A8:  MOVLW  43
05A9:  MOVWF  37
05AA:  CALL   0BE
....................       delay_ms(100); 
05AB:  MOVLW  64
05AC:  MOVWF  38
05AD:  CALL   012
05AE:  GOTO   53E
....................     
....................    } 
....................     
.................... } 
....................  
05AF:  SLEEP

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
